steps:

  # Julia versions

  - label: "Julia 1.6"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-test#v1:
          test_args: "--quickfail"
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/
    timeout_in_minutes: 120

  - label: "Julia 1.7"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.7
      - JuliaCI/julia-test#v1: ~
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120

  - label: "Julia 1.8"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.8
      - JuliaCI/julia-test#v1: ~
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120

  - label: "Julia nightly"
    plugins:
      - JuliaCI/julia#v1:
          version: nightly
      - JuliaCI/julia-test#v1: ~
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120
    soft_fail:
      - exit_status: 1


    # CUDA versions (from artifacts)

    # NOTE: we support those CUDA versions for which the latest cuDNN is available
    #       https://developer.nvidia.com/rdp/cudnn-archive

  - label: "CUDA {{matrix}}"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-test#v1:
          test_args: "--thorough"
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "11.0"
      cap: "sm_80"
    env:
      JULIA_CUDA_VERSION: "{{matrix}}"
      JULIA_CUDA_USE_BINARYBUILDER: 'true'
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120
    matrix:
      - "11.7"
      - "11.6"
      - "11.5"
      - "11.4"
      - "11.3"
      - "11.2"
      - "11.1"
      - "11.0"

  - label: "CUDA 10.2"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-test#v1:
          test_args: "--thorough"
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "10.2"
      cap: "sm_75"
    env:
      JULIA_CUDA_VERSION: '10.2'
      JULIA_CUDA_USE_BINARYBUILDER: 'true'
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120


   # special tests

  # - label: "Windows"
  #   plugins:
  #     - JuliaCI/julia#v1:
  #         version: 1.6
  #     - JuliaCI/julia-test#v1: ~
  #     # XXX: no coverage, as no secrets on Windows
  #   agents:
  #     queue: "juliagpu-windows"
  #     cuda: "*"
  #   if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
  #   timeout_in_minutes: 120

  - label: "GPU-less environment"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
      - JuliaCI/julia-test#v1:
          run_tests: false
    command: |
      julia --project -e 'using CUDA;
                          @assert !CUDA.functional();
                          CUDA.download_artifacts()'
    env:
      CUDA_VISIBLE_DEVICES: ''
      JULIA_CUDA_VERSION: '11.6'
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 60

  - label: "NNlibCUDA.jl"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    command: |
      julia -e 'using Pkg;

                println("--- :julia: Instantiating project");
                Pkg.develop(PackageSpec(path=pwd()));
                Pkg.add(PackageSpec(name="NNlibCUDA", rev="master"));
                Pkg.instantiate();

                println("+++ :julia: Running tests");
                Pkg.test("NNlibCUDA"; coverage=true);'
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 60

  - label: "Compute Sanitizer"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-test#v1:
          julia_args: "-g2"
          test_args: "--sanitize --quickfail --jobs=1"
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "11.0"
      cap: "sm_80"
    env:
      JULIA_CUDA_VERSION: '11.6'
      JULIA_CUDA_USE_COMPAT: 'false'  # NVIDIA bug #3418723: injection tools prevent probing libcuda
      JULIA_CUDA_USE_BINARYBUILDER: 'true'
    if: build.message !~ /\[skip tests\]/ &&
        build.branch =~ /^master$$/
    timeout_in_minutes: 240

  - label: "SubPackage -- {{matrix}}"
    matrix:
      - "CUSTATEVEC"
      - "CUTENSORNET"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "11.0"
      cap: "sm_80"
    env:
      JULIA_CUDA_VERSION: '11.6'
      JULIA_CUDA_USE_BINARYBUILDER: 'true'
      PACKAGE: '{{matrix}}'
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120
    commands: |
      julia -e 'import Pkg; Pkg.develop(; path = pwd())' # CUDA
      julia -e 'import Pkg; Pkg.develop(; path = joinpath(pwd(), "lib", ENV["PACKAGE"]))'
      julia -e 'import Pkg; Pkg.precompile()'
      julia -e 'import Pkg; Pkg.test(ENV["PACKAGE"])'

  # other tasks

  # we want to benchmark every commit on the master branch, even if it failed CI
  - wait: ~
    continue_on_failure: true

  # if we will submit results, use the benchmark queue so that we will
  # be running on the same system each time
  - label: "Benchmarks on 1.6"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
    env:
      BENCHMARKS: "true"
      CODESPEED_PROJECT: "$BUILDKITE_PIPELINE_NAME"
      CODESPEED_BRANCH: "$BUILDKITE_BRANCH"
      CODESPEED_COMMIT: "$BUILDKITE_COMMIT"
      CODESPEED_EXECUTABLE: "Julia 1.6"
    command: |
      julia --project -e '
        ENV["CODESPEED_ENVIRONMENT"] = ENV["BUILDKITE_AGENT_NAME"]
        println("--- :julia: Instantiating project")
        using Pkg
        Pkg.instantiate()
        Pkg.activate("perf")
        Pkg.instantiate()
        push!(LOAD_PATH, @__DIR__)
        println("+++ :julia: Benchmarking")
        include("perf/runbenchmarks.jl")'
    agents:
      queue: "benchmark"
      cuda: "*"
    if: build.message !~ /\[skip benchmarks\]/ &&
        build.branch =~ /^master$$/
    timeout_in_minutes: 30

  - label: "Benchmarks on 1.7"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.7
    env:
      BENCHMARKS: "true"
      CODESPEED_PROJECT: "$BUILDKITE_PIPELINE_NAME"
      CODESPEED_BRANCH: "$BUILDKITE_BRANCH"
      CODESPEED_COMMIT: "$BUILDKITE_COMMIT"
      CODESPEED_EXECUTABLE: "Julia 1.7"
    command: |
      julia --project -e '
        ENV["CODESPEED_ENVIRONMENT"] = ENV["BUILDKITE_AGENT_NAME"]
        println("--- :julia: Instantiating project")
        using Pkg
        Pkg.instantiate()
        Pkg.activate("perf")
        Pkg.instantiate()
        push!(LOAD_PATH, @__DIR__)
        println("+++ :julia: Benchmarking")
        include("perf/runbenchmarks.jl")'
    agents:
      queue: "benchmark"
      cuda: "*"
    if: build.message !~ /\[skip benchmarks\]/ &&
        build.branch =~ /^master$$/
    timeout_in_minutes: 30

  - wait

  # benchmarks outside of the master branch don't submit their results,
  # so they can run on any system in the juliagpu queue.
  - label: "Benchmarks (dry run)"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
    command: |
      julia --project -e '
        println("--- :julia: Instantiating project")
        using Pkg
        Pkg.instantiate()
        Pkg.activate("perf")
        Pkg.instantiate()
        push!(LOAD_PATH, @__DIR__)

        println("+++ :julia: Benchmarking")
        include("perf/runbenchmarks.jl")'
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip benchmarks\]/ &&
        build.branch !~ /^master$$/ &&
        !build.pull_request.draft
    timeout_in_minutes: 30

  - label: "Documentation"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
    command: |
      julia --project -e '
        println("--- :julia: Instantiating project")
        using Pkg
        Pkg.instantiate()
        Pkg.activate("docs")
        Pkg.instantiate()
        push!(LOAD_PATH, @__DIR__)

        println("+++ :julia: Building documentation")
        include("docs/make.jl")'
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip docs\]/ && !build.pull_request.draft
    timeout_in_minutes: 30



env:
  JULIA_PKG_SERVER: "" # we don't want to wait until the PkgServer updates
  SECRET_CODECOV_TOKEN: "o43LveCldXhMUteqc2AzdL+dx51CUYz2L/6j+WjSr4lbLb0t/SfpWEPJzrymGgYnQ09hR7otPNShA+40ew6yRMRV7TSgm6ZgdbNeum7drjEMAqX3knKgqbTtvPqgjkQiaXNzSWuJfrsfFb32bkj/iXAoIEdBrpVSYHCb95cf1O10LBTFRlH8AAGzsk9Tvc1cIOl3Wdp34KDLKwIzFYTF405QhgtBwwopaC5DRIuUNuLJ/wPOif4rF1OOMUkPCiTFb2HflpGRhiRvKuj34WwNu/+HEE2pmmLQnKPcJOsg+iPvFY4U/prlKkU3fNtgeE4FTmMSorOZT94sycUfvBMWig==;U2FsdGVkX18MIdzVE4KsKHgrhuS5QdfrSe+0ft4jlDZZcmJfrR0AT7RuRf8TPeFDw3R8qUNuwuZVrkZPJSDBgQ=="
  SECRET_DOCUMENTER_KEY: "N7Uw4V45sCHcv+WUDxbnXshHpwFDMpPB/LZJCpc3pvv2nCkibPzFQNBIDRGz2HVTPlgiWa+JGEz875gH1Nvz4I+ugB5cwCVLYazodhcONYxwAEDMXuwXAZH3zsbBVq67XJ+VDItKGb35HylhCyqIbtsLf+EyEbejx9Wl/1Mhaudr9ruVJ/eoGj8kJIzRiSNTJpyMElOJVS4r3jUeAOVtmEFU5PyNhNgKFv0F16iVwnn1q7lzhVAcgLDpZNltBx6hMJBafUEyv5gAsBP7Pi3we61F+BtW1XstgHK4t9EcE4ObEFPQn4lcWtLehKPqjv9L31USub85W4EibC5JHFMfPQ==;U2FsdGVkX18zluBtotQybZ2VK6GXmmu9UpMVJBJBKwozsavf7T/PV5ZXHno1g4esuBsm2hUzP3Grkubf7i+bylDOXtOZWfTpqmQHuIjcJJ3qOikQ7QiFiyXY6TNIV8b/+k/nOVTEHAAHYU2gag2hETFN93BWCFOLQ4y86XYZRHMIpMidKFK+i3BMa7Vabm7pJDJCm+0czwefwkBcLwlQInsDpMbzQ08Xfzrw9qvIBhJ3qm+/pydsGkwkTk6PbSpvSpeyMEDvIm2w8v7rQvoW5W7TDkjxX1xdBUUE+XEY+s+ueF7hZfRRsQZztq8XjV8akWQTQlz19tYNgRRh28GpH5y73Zum2FWYNTicDKV0FZefdayzkCQkSNTnSH7Zolpm423/myB4w8gdmY6jWn/+ZhbmVCG3y4lgeQWEaBetn05fE8iGHiwEwSBS4gQFaJrqWMACcLFkUVM996xj/aVJypnO9yLwqEgxAIzihjix4k/eofXEvSIbr55IpMdv9eB8z5K7GuHXAK/I7zCKt4GhoDDAErXU3kIWDizrrRcUC97FdOCIP3x5ZC6PJgFbd5f+VxvwPOfwrRi/iSp64DgSD97BM/Mgrty0VCqsrdIyh9XIIam2rxPMiUxtpIn7blL/T8HtYxKGRc4JL0zUMSPyRzclysMyMwlDYE5PCxsGCiumEJ1DSgqAP0qAQuRqXod3QfMv5n8jZRFmfBmwbDvDpGdaAVYqx4GdbJicrZA8IJL2ReW/zdBqf71mS7xjSJ7zWZ39xEcR8uV0tKoxH97zB9+5JaQUk5+PLdmbp5OOKyQtt9ZMq/A/5UAFEbuKtSVPybboDBPdE6sbrDWEDpnTHvP5oyw98LnK6x0M2PVW6VXdnOgKUTXtBcxo6yOBNdOj5wboXU+8D4bx/+KVXHhX8VJvUv5X2CDHZzwSkKsZ/EONuElj4OZW05Z2/H2V2k8TQKMgM0hmdmtMLnbDPyZ5Nm9ESVRAjyC55DUrdm8yGcrURBWYiMoAlmm/dw+wtjVEulzXKFF66TQDGf/SuybSOA40WZ0hCxE3iQm4+bHl3FBf+xFaEUAVia79zySlSInqR8FDz7tamPPjbsuIisczX4g/yCZFukKhR1IEjN8vAOsTmmdr/KnUcnLSvTu4OoozcJiVqed9PoyvWdafqSTGu9IZfrFjEF+l4e+liB/aV3oPDAkBNvO21otEZ70L0uZVg9lRxZqju9nk7DUt3yKWPNTU9igqlZcY47mur8C3DoOR2aTXpqN10nakI8mxyNnhkrvOVL17vivf+Bc2Kjnnpvd/zkpi+dxuF0SBzyfLjsKqGXgDGxCA+qC7hXpmRQXPSAY1KuV20U/iPBQMYPREJoyyKI+BOvIHYlBSqOdwGLFz9QElnEQXgrXHBkWOWVJTfr4cw4OHygIklNnKt7D3/m34g/LoTwDTVYXawWvZoYQc2pHB+oFMrO8yrwaAiauqqfy3QHr25rrqYXKEgOOfwBg+3RscgIHMJTPvwU055firaYGaFvQi8QwyaprebT/dek14TX7R8gQv7MVCWu8IqxL3Cgrd8br16qAWKny93yjclaY6mEzqfKChgrmAe4p8kbuKBnacv8iUw1LSQiPIbCFrYkLWJ4ylaVV5h4EzpspmBGYZ+R32zGzTcVfhpu7j+wL+RTtRMRLs4uI31IAdMtURplqVCkVpbvUK99dNzKdRWWUkcrSV9bnPGR27eXMqKXMngJmR7MKBI+zx9HElFJFWmyjiY4UsQP2dfZCTVtCSaXW5pRYUYB7lut3xNO0KUeW6wh3HMJh6UQratBfQi3hIE55zyOkLKING1X/oCbkH0ZRHja8lY/Rh6TNwmAipNNxyJVfbv0fdNHnG/vyEJ9Tudw0CsCwwWt3re6gfIy+4LHp+qdca7nwE61jTxR1WYyBPj0eeBqd8ChO/Fa/wf0xdKp5ESJmdpK+qFTFjHfX+yQL5Ds08aDLHVDIuHXVEqCahfzn3POUGNKQ1z5zo/A8Rk3qNeAMO7pSmUd1HQhf+IocFDQRfka5yYqCFZnOPn/dazxLzYIp0bS3HzgzQ3fuJJhYIY0WG4tE/t1k+8vCF3yUsW4ZLgV/Tya+j/Qu3X509wYJJ6D0fCah12O9w1FWBeq8mVH7gsDbgplOnFruFOpLRsDenMD3+HdJaNI9byG/4Pi3rF9DzInvpQweaD3x+sPC/bokz7051mxp4nRY1vD9p88zUxAN4PFPlWVP7XKmxDknJHDWAae1yJ6DAxFJniqw/sYIAJ8Ez/gxPJJC4PO0IsiY38tIuJ2dBSdgNJiSP7D2/wPO02zUm8uMGdv6Xl4G28OhKDP53Fgnom4dki1gKCVuhFTB5k8vSqrhgcjBFZIG2T9bkiFLA+rnOMeydnnItCoEN16pjsg+3VvBVNN+CGlbf8KpQlGD6C4bpqBf3djDhioIaJOhq/1za3WEB9Dqn7Z0FGuDwKKdYVuV8cTDL0qsv+lXNUZF9Huf7oopuZLgQ8ixpHah5kM1wb8C7wOKaoyOMitVaFySzCRoLYc+HuBCXsOTCofOeSN7f8530fIgSwoeFt8JfgsGNyO9eYKf9r6xTJmRa+3iTe8aoMctgfjKlr2uyOHRLLvaAMMsrEjGnCZwJxYP5p7P+7nYmhM6PEIF6rw6P9Se5bQvv5K9ERVniNSEnXYbySQ8bEkTlA1KFVFt+5UlsHiguEtMuQugxxg0rRM693vtBzqKJSuuySiYVq2P0hWSXOZu7MF8aHm0lavP2+G859tAspoSkU9qjuJYdAKGXsR9pjueqPkhEtIt2Nkd+J1lXr/2uGFIjT5ico85EplJFBLXoQxpeUevXEt0a99FxFrz0rYlcg9abylzr7EdDXEoOh+3nObOAHOX4E2gfFwfYND5COS0VCu2pZGAnL/CeEe7s70n9Zy+iLm/Zfd3zpoAr3DxzONFNTxSy9mX46h/K/4i/Ao1q1Fz+m4eS2AFc21QiU+tMS4G6eUWVLGSVsenU5xmKg1EX9Ubxw6wSZRpUJ/MJ7UKlXBSMbWcqtE+oRLscM1ozm82rZF9eQq2IMNyT1rtBsaBCyAshF9g+BmNl+BUTP5iGanwAHVrfFJDdXO0YshAfusBleJZq2iQ8SkhddQfevKa99dUPF6DCCiK5KgrCEB5exvHh7Dzv0tbO7X3Xi+6PeOnXkDhl1aUvsuniOCmnv7wAS6XyTaWMRv7pmvJDjV3qkfAX8K1Lrtwrk7ec+mH30gbPN8qf6Cyb0B+9gBl84Nl5qSf9YOFrm+ReDIBPOHQBGcwM+6VfDh9t6DPh71vvHnnfaSGvJ+BUt1gOvmDpYQabtG1fkzqLQWv0/sfxEOzhC/xIWDlNmjNUHYXu84fcqCs2CjVYBBTCfWq+dfXV4aqzUX1SCjxENonJyf2C37R5jUpN4pALfS45Q0OfEnrI/B/EEzUxB0subpk2Cg02KYeRG7rJ44gTTpSC1FqSNYc6ddHcREOb2G5YBLpGvxXLHRpg9CYvGnZLL2KtRBFsyQZ9s2b4C63/deerAf96PmXBGeUyPnMhd3xMVGcsMJEmvdwrDfbVvtMQkRoScTSxGS7ZEHwjuVFQh61lo2yAcqXQuZhgNM6UTbS/AbReRJGe8qbQ3tmmkHcE2BKRf5WTG4w14w6RGQbe0+w3hS2hD79MCt8JV9Us60jMW4TtDn8tmm/HavWdA9GCP1M1dZfc8enR7ZRAA2YkfBXZ7my0e3bR/CDqCtI9JRLGkPUjYyXxgRNRVciBsp4ppHg6RegvdXhihIVBP2FVd47vn1VWCjk8xmeqtSF5IzivKJ9joaQZz3J+VWMOmgp+sGwZNzmYRbyKami8oLtUl11GmeW11r6gOVvdCpSNdG8TC8Iyur+1beqWPhGs7BAnZkc9AeL3C5ncv9DonwSZIYz/4tdbdMVlEBCkRMyAx2mjpMEyFhQs1a/oeFKxPz1zdSsZQAnSayPPKUua/Uw9WAqfjqu/Xj7CiRiTqHfU5w0S823tHZN0q64TiLtY7WUldUm28TzMrRN7ewvRRzKZ80ujMLJ60UtxGSlVZUQvbM63ACfxBl1ZF+b5ULVx+X7TmSgR4h/FmIV/sUJNuWauIZe9u0qjjPXnySdbecqtFsNLGbb5hnFo+cE7Rf6jYY1CvaGB2oP8mSMZzu9Z3Q+ei72gv/714vAv2mteZCD+uPzw5lw80KXrR1KZ0tjOpRWuNjqWlNeUn2gse9bQuTyC7D3Rd/Nf2x15XTqLV3n9H3zIOte2qwk6n/aRk9qqhzz8IlPLV1UvM1Tr3Y8imBVn5erFkngQGYM/6gZCW/Qqu3IWoYmdvKAFKAAJk+unU1xrrqqtbOJtYW3soXp8KiVwTORFXNdgEz6M1W0sWvLoeRkkld2nKgg="
  SECRET_CODESPEED_SERVER: "n6tQqMwRA5WJZXPT9sVmKBFR+xGwoq2DMlhGIQLETkyTbvNLAgRERcMR7Udxz4nEN321Ieo7U6/vwPWeDnzhsv+Qcx9jEK0BgWvJ1iDyPYxw/x2yrrP4OnFyEyl0sydHjpDSMakvSCqu5E3YW0J0eN2eSVg0BtoNqSD7BCRh3Fh2lHrEVD8FjZLhdR2lSepJBwWhN3QjK+2RsNEMJJKAQTimDJxqPr+9UDNr1Zhiy2Yn3H4aV4TZ6XX2ioCVTG7rI3VjFjFWNJ6kwQIW0MEcF56OIhnuNEgGNIvegsrkhitKvWUxeeuYEY6imfSvKm2Ljyw5RY3UHvqxg82hrWx2tw==;U2FsdGVkX19Pf6SMbEv9EN/rv6GwO3NMzFSjoE4G5FNaGMLyKOieku7o2jCFju46wt4hF7KvpHXZFAr0azbT42nWZromLvmrrZnumUuVW98="
