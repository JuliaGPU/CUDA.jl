steps:

  # Julia versions

  - label: "Julia 1.6"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-test#v1:
          test_args: "--quickfail"
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/
    timeout_in_minutes: 120

  - label: "Julia 1.7"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.7
      - JuliaCI/julia-test#v1: ~
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120

  - label: "Julia 1.8"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.8
      - JuliaCI/julia-test#v1: ~
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120

  - label: "Julia nightly"
    plugins:
      - JuliaCI/julia#v1:
          version: nightly
      - JuliaCI/julia-test#v1: ~
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120
    soft_fail:
      - exit_status: 1


    # CUDA versions (from artifacts)

    # NOTE: we support those CUDA versions for which the latest cuDNN is available
    #       https://developer.nvidia.com/rdp/cudnn-archive

  - label: "CUDA {{matrix}}"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-test#v1: ~
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "11.0"
      cap: "sm_80"
    env:
      JULIA_CUDA_VERSION: "{{matrix}}"
      JULIA_CUDA_USE_BINARYBUILDER: 'true'
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120
    matrix:
      - "11.7"
      - "11.6"
      - "11.5"
      - "11.4"
      - "11.3"
      - "11.2"
      - "11.1"
      - "11.0"

  - label: "CUDA 10.2"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-test#v1:
          test_args: "--thorough"
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "10.2"
      cap: "sm_75"
    env:
      JULIA_CUDA_VERSION: '10.2'
      JULIA_CUDA_USE_BINARYBUILDER: 'true'
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120


   # special tests

  # - label: "Windows"
  #   plugins:
  #     - JuliaCI/julia#v1:
  #         version: 1.6
  #     - JuliaCI/julia-test#v1: ~
  #     # XXX: no coverage, as no secrets on Windows
  #   agents:
  #     queue: "juliagpu-windows"
  #     cuda: "*"
  #   if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
  #   timeout_in_minutes: 120

  - label: "NNlibCUDA.jl"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    command: |
      julia -e 'using Pkg;

                println("--- :julia: Instantiating project");
                Pkg.develop(PackageSpec(path=pwd()));
                Pkg.add(PackageSpec(name="NNlibCUDA", rev="master"));
                Pkg.instantiate();

                println("+++ :julia: Running tests");
                Pkg.test("NNlibCUDA"; coverage=true);'
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 60

  - label: "Compute Sanitizer"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-test#v1:
          julia_args: "-g2"
          test_args: "--sanitize --quickfail --jobs=1"
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "11.0"
      cap: "sm_80"
    env:
      JULIA_CUDA_VERSION: '11.6'
      JULIA_CUDA_USE_COMPAT: 'false'  # NVIDIA bug #3418723: injection tools prevent probing libcuda
      JULIA_CUDA_USE_BINARYBUILDER: 'true'
    if: build.message !~ /\[skip benchmarks\]/ &&
        build.branch =~ /^master$$/
    timeout_in_minutes: 240

  - label: "SubPackage -- {{matrix}}"
    matrix:
      - "CUSTATEVEC"
      - "CUTENSORNET"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
      - JuliaCI/julia-coverage#v1:
          codecov: true
          dirs:
            - src
            - lib
            - examples
    agents:
      queue: "juliagpu"
      cuda: "11.0"
      cap: "sm_80"
    env:
      JULIA_CUDA_VERSION: '11.6'
      JULIA_CUDA_USE_BINARYBUILDER: 'true'
      PACKAGE: '{{matrix}}'
    if: build.message !~ /\[skip tests\]/ && !build.pull_request.draft
    timeout_in_minutes: 120
    commands: |
      julia -e 'import Pkg; Pkg.develop(; path = pwd())' # CUDA
      julia -e 'import Pkg; Pkg.develop(; path = joinpath(pwd(), "lib", ENV["PACKAGE"]))'
      julia -e 'import Pkg; Pkg.precompile()'
      julia -e 'import Pkg; Pkg.test(ENV["PACKAGE"])'

  # other tasks

  # we want to benchmark every commit on the master branch, even if it failed CI
  - wait: ~
    continue_on_failure: true

  # if we will submit results, use the benchmark queue so that we will
  # be running on the same system each time
  - label: "Benchmarks on 1.6"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
    env:
      BENCHMARKS: "true"
      CODESPEED_PROJECT: "$BUILDKITE_PIPELINE_NAME"
      CODESPEED_BRANCH: "$BUILDKITE_BRANCH"
      CODESPEED_COMMIT: "$BUILDKITE_COMMIT"
      CODESPEED_EXECUTABLE: "Julia 1.6"
    command: |
      julia --project -e '
        ENV["CODESPEED_ENVIRONMENT"] = ENV["BUILDKITE_AGENT_NAME"]
        println("--- :julia: Instantiating project")
        using Pkg
        Pkg.instantiate()
        Pkg.activate("perf")
        Pkg.instantiate()
        push!(LOAD_PATH, @__DIR__)
        println("+++ :julia: Benchmarking")
        include("perf/runbenchmarks.jl")'
    agents:
      queue: "benchmark"
      cuda: "*"
    if: build.message !~ /\[skip benchmarks\]/ &&
        build.branch =~ /^master$$/
    timeout_in_minutes: 30

  - label: "Benchmarks on 1.7"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.7
    env:
      BENCHMARKS: "true"
      CODESPEED_PROJECT: "$BUILDKITE_PIPELINE_NAME"
      CODESPEED_BRANCH: "$BUILDKITE_BRANCH"
      CODESPEED_COMMIT: "$BUILDKITE_COMMIT"
      CODESPEED_EXECUTABLE: "Julia 1.7"
    command: |
      julia --project -e '
        ENV["CODESPEED_ENVIRONMENT"] = ENV["BUILDKITE_AGENT_NAME"]
        println("--- :julia: Instantiating project")
        using Pkg
        Pkg.instantiate()
        Pkg.activate("perf")
        Pkg.instantiate()
        push!(LOAD_PATH, @__DIR__)
        println("+++ :julia: Benchmarking")
        include("perf/runbenchmarks.jl")'
    agents:
      queue: "benchmark"
      cuda: "*"
    if: build.message !~ /\[skip benchmarks\]/ &&
        build.branch =~ /^master$$/
    timeout_in_minutes: 30

  - wait

  # benchmarks outside of the master branch don't submit their results,
  # so they can run on any system in the juliagpu queue.
  - label: "Benchmarks (dry run)"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
    command: |
      julia --project -e '
        println("--- :julia: Instantiating project")
        using Pkg
        Pkg.instantiate()
        Pkg.activate("perf")
        Pkg.instantiate()
        push!(LOAD_PATH, @__DIR__)

        println("+++ :julia: Benchmarking")
        include("perf/runbenchmarks.jl")'
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip benchmarks\]/ &&
        build.branch !~ /^master$$/ &&
        !build.pull_request.draft
    timeout_in_minutes: 30

  - label: "Documentation"
    plugins:
      - JuliaCI/julia#v1:
          version: 1.6
    command: |
      julia --project -e '
        println("--- :julia: Instantiating project")
        using Pkg
        Pkg.instantiate()
        Pkg.activate("docs")
        Pkg.instantiate()
        push!(LOAD_PATH, @__DIR__)

        println("+++ :julia: Building documentation")
        include("docs/make.jl")'
    agents:
      queue: "juliagpu"
      cuda: "*"
    if: build.message !~ /\[skip docs\]/ && !build.pull_request.draft
    timeout_in_minutes: 30



env:
  SECRET_CODECOV_TOKEN: "o43LveCldXhMUteqc2AzdL+dx51CUYz2L/6j+WjSr4lbLb0t/SfpWEPJzrymGgYnQ09hR7otPNShA+40ew6yRMRV7TSgm6ZgdbNeum7drjEMAqX3knKgqbTtvPqgjkQiaXNzSWuJfrsfFb32bkj/iXAoIEdBrpVSYHCb95cf1O10LBTFRlH8AAGzsk9Tvc1cIOl3Wdp34KDLKwIzFYTF405QhgtBwwopaC5DRIuUNuLJ/wPOif4rF1OOMUkPCiTFb2HflpGRhiRvKuj34WwNu/+HEE2pmmLQnKPcJOsg+iPvFY4U/prlKkU3fNtgeE4FTmMSorOZT94sycUfvBMWig==;U2FsdGVkX18MIdzVE4KsKHgrhuS5QdfrSe+0ft4jlDZZcmJfrR0AT7RuRf8TPeFDw3R8qUNuwuZVrkZPJSDBgQ=="
  SECRET_CODESPEED_SERVER: "n6tQqMwRA5WJZXPT9sVmKBFR+xGwoq2DMlhGIQLETkyTbvNLAgRERcMR7Udxz4nEN321Ieo7U6/vwPWeDnzhsv+Qcx9jEK0BgWvJ1iDyPYxw/x2yrrP4OnFyEyl0sydHjpDSMakvSCqu5E3YW0J0eN2eSVg0BtoNqSD7BCRh3Fh2lHrEVD8FjZLhdR2lSepJBwWhN3QjK+2RsNEMJJKAQTimDJxqPr+9UDNr1Zhiy2Yn3H4aV4TZ6XX2ioCVTG7rI3VjFjFWNJ6kwQIW0MEcF56OIhnuNEgGNIvegsrkhitKvWUxeeuYEY6imfSvKm2Ljyw5RY3UHvqxg82hrWx2tw==;U2FsdGVkX19Pf6SMbEv9EN/rv6GwO3NMzFSjoE4G5FNaGMLyKOieku7o2jCFju46wt4hF7KvpHXZFAr0azbT42nWZromLvmrrZnumUuVW98="
  SECRET_DOCUMENTER_KEY: "ifzkRIXwpCeQebI+pyhIM0/L+lmhofTiFak6Pb74vmD4U1ZZcr5GKLSIYZljJApo3ZuzPg9EnWc+2m5i7McTDjA4m4x4K/IWhE7wdWujZHTU2Cz2QjoErJkU6FtkH3zTMsz/fGloyXkDPtdKV9rgGRtJYU51GIVT8IgCjioGv0pzkBjBvaoyfiEFpwqGIsmPbam72BgbX83b0kl6t8zJVuzlLyIA1P5rj0JXJWXQZYqn0BetYPBbquIKzyT/tKUrKF9j8/fD4t9pIT/Z3z2IOKsxxQGk2VuOQNlKQt+sEBPUTUW+aaOw+NJsHE9ziOEbWergphzYwctuRupPoxt6WA==;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"
